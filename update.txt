# Update contract addresses in web3Service.js
cat > /home/vanir/ehr-blockchain/frontend/patient-portal/src/services/web3Service.js << 'EOF'
import Web3 from 'web3';
import EHRRegistryABI from '../contracts/EHRRegistry.json';
import AccessControlABI from '../contracts/AccessControl.json';
import PatientRecordsABI from '../contracts/PatientRecords.json';

// Update these with your deployed contract addresses from the terminal output
const contractAddresses = {
  EHRRegistry: '0x42699A7612A82f1d9C36148af9C77354759b210b',
  AccessControl: '0xa50a51c09a5c451C52BB714527E1974b686D8e77',
  PatientRecords: '0x9a3DBCa554e9f6b9257aAa24010DA8377C57c17e'
};

let web3;
let contracts = null;

// Initialize web3
export const initWeb3 = async () => {
  // Modern dapp browsers
  if (window.ethereum) {
    web3 = new Web3(window.ethereum);
    try {
      // Request account access
      await window.ethereum.request({ method: 'eth_requestAccounts' });
      console.log("Ethereum enabled");
    } catch (error) {
      console.error("User denied account access");
      throw new Error("Please allow access to your Ethereum account");
    }
  }
  // Legacy dapp browsers
  else if (window.web3) {
    web3 = new Web3(window.web3.currentProvider);
  }
  // Fallback - use local provider
  else {
    console.log('Using local web3 provider');
    const provider = new Web3.providers.HttpProvider('http://localhost:8545');
    web3 = new Web3(provider);
  }
  
  return web3;
};

// Get current account
export const getAccount = async () => {
  if (!web3) {
    await initWeb3();
  }
  const accounts = await web3.eth.getAccounts();
  return accounts[0];
};

// Initialize contracts
export const initContracts = async () => {
  if (!web3) {
    await initWeb3();
  }
  
  try {
    const ehrRegistry = new web3.eth.Contract(
      EHRRegistryABI.abi,
      contractAddresses.EHRRegistry# Update contract addresses in web3Service.js
cat > /home/vanir/ehr-blockchain/frontend/patient-portal/src/services/web3Service.js << 'EOF'
import Web3 from 'web3';
import EHRRegistryABI from '../contracts/EHRRegistry.json';
import AccessControlABI from '../contracts/AccessControl.json';
import PatientRecordsABI from '../contracts/PatientRecords.json';

// Update these with your deployed contract addresses from the terminal output
const contractAddresses = {
  EHRRegistry: '0x42699A7612A82f1d9C36148af9C77354759b210b',
  AccessControl: '0xa50a51c09a5c451C52BB714527E1974b686D8e77',
  PatientRecords: '0x9a3DBCa554e9f6b9257aAa24010DA8377C57c17e'
};

let web3;
let contracts = null;

// Initialize web3
export const initWeb3 = async () => {
  // Modern dapp browsers
  if (window.ethereum) {
    web3 = new Web3(window.ethereum);
    try {
      // Request account access
      await window.ethereum.request({ method: 'eth_requestAccounts' });
      console.log("Ethereum enabled");
    } catch (error) {
      console.error("User denied account access");
      throw new Error("Please allow access to your Ethereum account");
    }
  }
  // Legacy dapp browsers
  else if (window.web3) {
    web3 = new Web3(window.web3.currentProvider);
  }
  // Fallback - use local provider
  else {
    console.log('Using local web3 provider');
    const provider = new Web3.providers.HttpProvider('http://localhost:8545');
    web3 = new Web3(provider);
  }
  
  return web3;
};

// Get current account
export const getAccount = async () => {
  if (!web3) {
    await initWeb3();
  }
  const accounts = await web3.eth.getAccounts();
  return accounts[0];
};

// Initialize contracts
export const initContracts = async () => {
  if (!web3) {
    await initWeb3();
  }
  
  try {
    const ehrRegistry = new web3.eth.Contract(
      EHRRegistryABI.abi,
      contractAddresses.EHRRegistry